#####################################################################
#   print_start macro
#####################################################################

[gcode_macro PURGE_LINE]
gcode:
	{% set hotend = params.HOTEND|int %}
	
	G90
	
	#G1 X-0.5 Y0.5 Z0.4 F8000
    G1 X1 Y1 Z0.4 F8000
	M104 S{hotend}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={hotend}
	
	G91
	G1 E13 F200
	G1 Y20 E3 F1200
	
	G1 Y120 E27 F1200
	G1 X0.8
	G1 Y-10 E2 F1200
	G1 X0.8
	
	G92 E0
	G90

[gcode_macro PURGE_LINE_INTO_BUCKET]
gcode: 
	{% set hotend = params.HOTEND|int %}
	{% set cycles = params.CYCLES|int %}
	
	SAVE_GCODE_STATE NAME=PURGELINEINTOBUCKET
	
	PARK_NOZZLE
	M104 S{hotend}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={hotend}
	
	M83
	{% for i in range(cycles) %}
	G1 E20 F300
	WIPE_NOZZLE CYCLES=1
	{% endfor %}
	
	RESTORE_GCODE_STATE NAME=PURGELINEINTOBUCKET



[gcode_macro BEACON_VARS]

variable_beacon_contact_calibration_temp: 150                           # nozzle temperature for auto calibration
variable_adaptive_mesh: False            # nozzle temperature for auto calibration
variable_beacon_contact_expansion_compensation: True   # enables the nozzle thermal expansion compensation
variable_beacon_contact_expansion_multiplier: 1.0   
gcode:


[delayed_gcode _BEACON_INIT]
initial_duration: 0.1
gcode:
    # reset nozzle thermal expansion offset
    _BEACON_SET_NOZZLE_TEMP_OFFSET RESET=True


[gcode_macro BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET]
variable_reference_z: 0.0
gcode:
	{% set z_speed = (printer.configfile.settings['stepper_z'].homing_speed)|float * 60 %}
	{% set z_hop = (printer.configfile.settings['beacon'].home_z_hop)|float %}
	{% set safe_home_x = (printer.configfile.settings.stepper_x.position_max) /2 %}
	{% set safe_home_y = (printer.configfile.settings.stepper_y.position_max) /2 %}
	
	{% if printer.toolhead.homed_axes != "xyz" %}
    		G28
	{% endif %}

	#QGL if setup
 	{% if printer.quad_gantry_level is defined and not printer.quad_gantry_level.applied %}
        SET_DISPLAY_TEXT MSG="QGL"
        {% if printer.configfile.settings["gcode_macro FAST_QGL"] is defined %}
            {% if printer.configfile.settings['beacon'].default_probe_method != contact %}
                FAST_QGL                                                         
            {% endif %}
        {% else %}
            quad_gantry_level                                                             
        {% endif %}
        G28 Z
	{% endif %}

	#Z_TILT if setup
	{% if printer.z_tilt is defined and not printer.z_tilt.applied %}
        SET_DISPLAY_TEXT MSG="Z-Tilt adjust"                              
        {% if printer.configfile.settings["gcode_macro FAST_Z_TILT"] is defined %}
            {% if printer.configfile.settings['beacon'].default_probe_method != contact %}
                FAST_Z_TILT                                                              
            {% endif %}
        {% else %}
            Z_TILT_ADJUST                                                                  
        {% endif %}
        G28 Z
	{% endif %}

	# settle the mechanics down  
	{% for i in range(10) %}
		beacon_poke speed=3 top=5 bottom=-0.6
	{% endfor %}

	# get and set start temperature offset 
	_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=150
	_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=150

	# get and set end temperature offset
	_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=250
	_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=250

	# get and set start temperature offset 
	_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=150
	_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=150

	# get and set end temperature offset
	_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=250
	_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=250

	# move back to home position
	G0 Z{z_hop} F{z_speed}
	G0 X{safe_home_x} Y{safe_home_y}

	# turn heater off
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0

			
	# echo results
	_BEACON_NOZZLE_TEMP_OFFSET

[gcode_macro _BEACON_PROBE_NOZZLE_TEMP_OFFSET]
gcode:
	# parameters
	{% set temp = params.TEMP|int %}

	# config
	{% set z_speed = (printer.configfile.settings['stepper_z'].homing_speed)|float * 60 %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}


	# wait for noozle to reach the probing temperature
	RESPOND  MSG="Waiting for nozzle to reach {temp}°C..."
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp} MAXIMUM={temp + 2}

	# wait for temperature to settle down
	RESPOND MSG="Waiting 60s for thermal expansion..."
	G4 P60000

	# probe
	RESPOND MSG="Probing with nozzle temperature {temp}°C..."
	PROBE PROBE_METHOD=contact SAMPLES=5 SAMPLES_TOLERANCE=0.005 SAMPLES_TOLERANCE_RETRIES=10 SAMPLES_RESULT=median
	G4 P2000 #wait 2 sec so beacon_query returns non inf value
	BEACON_QUERY

	# raise z
	G0 Z5 F{z_speed}

[gcode_macro _BEACON_SET_NOZZLE_TEMP_OFFSET]
gcode:
	{% set reset = true if params.RESET|default(false)|lower == 'true' else false %}

	# config 
	{% set z_speed = (printer.configfile.settings['stepper_z'].homing_speed)|float * 60 %}

	# beacon config
	{% set beacon_contact_calibration_temp = params.probing_temp|default(150)|int %}
	{% set beacon_contact_expansion_multiplier = printer["gcode_macro BEACON_VARS"].beacon_contact_expansion_multiplier|default(1.0)|float %}
	{% set beacon_contact_expansion_compensation = true if printer["gcode_macro BEACON_VARS"].beacon_contact_expansion_compensation|default(false)|lower == 'true' else false %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	{% if reset %}
		# reset applied offset
		SAVE_VARIABLE VARIABLE=nozzle_expansion_applied_offset VALUE=0

	{% else %}
		{% if beacon_contact_expansion_compensation %}

			# get coefficient value
			{% set nozzle_expansion_coefficient = svv.nozzle_expansion_coefficient|default(0)|float %}

			# get applied offset
			{% set applied_offset = svv.nozzle_expansion_applied_offset|default(0)|float %}

			# get extruder target temperature
			{% set temp = printer['extruder'].target|float %}

			# calculate new offset
			{% set temp_offset = temp - beacon_contact_calibration_temp %}
			{% set expansion_coefficient = nozzle_expansion_coefficient %}
			{% set expansion_offset = beacon_contact_expansion_multiplier * (temp_offset * (expansion_coefficient / 100)) %}

			# set new offset
			{% set new_offset = ((-applied_offset) + expansion_offset) %}
			SET_GCODE_OFFSET Z_ADJUST={new_offset} MOVE=1 SPEED={z_speed}
			SAVE_VARIABLE VARIABLE=nozzle_expansion_applied_offset VALUE={expansion_offset}

			# echo
			RESPOND  MSG={'"Nozzle expansion offset of %.6fmm applied"' % (expansion_offset)}

		{% endif %}
	{% endif %}

[gcode_macro _BEACON_REMOVE_NOZZLE_TEMP_OFFSET]
gcode:
	# config 
	{% set z_speed = (printer.configfile.settings['stepper_z'].homing_speed)|float * 60 %}

	# beacon config
	{% set beacon_contact_expansion_compensation = true if printer["gcode_macro BEACON_VARS"].beacon_contact_expansion_compensation|default(false)|lower == 'true' else false %}

	{% if beacon_contact_expansion_compensation %}

		# ratos variables file
		{% set svv = printer.save_variables.variables %}

		# get applied offset
		{% set applied_offset = svv.nozzle_expansion_applied_offset|default(0)|float %}

		# remove applied offset
		SET_GCODE_OFFSET Z_ADJUST={(-applied_offset)} MOVE=0 SPEED={z_speed}

	{% endif %}

[gcode_macro _BEACON_STORE_NOZZLE_TEMP_OFFSET]
gcode:
	# parameters
	{% set temp = params.TEMP|int %}

	#variable file
	{% set svv = printer.save_variables.variables %}

	# get last probe result
	{% set last_z = printer.beacon.last_z_result|default(0)|float %}

	# set temperature offset
	{% if temp == 150 %}
		SET_GCODE_VARIABLE MACRO=BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET VARIABLE=reference_z VALUE={last_z}
	{% else %}
		{% set reference_z = printer["gcode_macro BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET"].reference_z|default(0)|float %}
		SAVE_VARIABLE VARIABLE=nozzle_expansion_coefficient VALUE={(last_z - reference_z)}
	{% endif %}

[gcode_macro _BEACON_NOZZLE_TEMP_OFFSET]
gcode:
	{% set svv = printer.save_variables.variables %}
	RESPOND  MSG={'"expansion coefficient %.6f"' % svv.nozzle_expansion_coefficient}

[gcode_macro BEACON_APPLY_MULTIPLIER]
gcode:

	# beacon config
	{% set beacon_contact_calibration_temp = printer["gcode_macro BEACON_VARS"].beacon_contact_calibration_temp|default(150)|int %}
	{% set beacon_contact_expansion_compensation = true if printer["gcode_macro BEACON_VARS"].beacon_contact_expansion_compensation|default(false) %}

	{% if beacon_contact_expansion_compensation %}
		# variables file
		{% set svv = printer.save_variables.variables %}

		# get coefficient
		{% set nozzle_expansion_coefficient = svv.nozzle_expansion_coefficient|default(0)|float %}

		# get coefficient multiplier
		{% set beacon_contact_expansion_multiplier = svv.nozzle_expansion_coefficient_multiplier|default(1.0)|float %}

		# calculate new multiplier
		{% set print_temp = printer['extruder'].target|float %}
		{% set z_offset = printer.gcode_move.homing_origin.z|float %}
		{% set temp_delta = print_temp - beacon_contact_calibration_temp %}
		{% set coefficient_per_degree = nozzle_expansion_coefficient / 100 %}
		{% set z_offset_per_degree = z_offset / temp_delta %}
		{% set new_multiplier = z_offset_per_degree / coefficient_per_degree %}

		# store new multiplier
		SAVE_VARIABLE VARIABLE=nozzle_expansion_coefficient_multiplier VALUE={new_multiplier}

		# console echo
		RESPOND  MSG={'"New multiplier is: %.6f_N_Value has been automatically saved and activated."' % new_multiplier}

	{% endif %}
    
# REQUIRES zero_reference_position to be setup in [bed_mesh]
# Do not modify below
gcode:

# [gcode_macro FAST_Z_TILT]
# gcode:
#     M117 Z_TILT
#     {% if printer.configfile.settings.z_tilt %}
#         {% if printer.z_tilt.applied == False %}
#             Z_TILT_ADJUST RETRY_TOLERANCE=1
#         {% endif %}
#         Z_TILT_ADJUST horizontal_move_z=2
#     {% endif %} 


[gcode_macro PRINT_START]
gcode:
    # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_chamber = params.CHAMBER|default("40")|int %}

    # Collecting variables
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
    {% if printer.configfile.settings['beacon'].home_z_hop is defined %}
        {% set z_hop = printer.configfile.settings['beacon'].home_z_hop|float %}
        {% set speed = printer.configfile.settings['beacon'].home_xy_move_speed|float %}
        {% set z_hop_speed = printer.configfile.settings['beacon'].home_z_hop_speed|float %}
    {% else %}
        {% set z_hop = printer.configfile.settings['safe_z_home'].home_z_hop|float %}
        {% set speed = printer.configfile.settings['safe_z_home'].home_xy_move_speed|float %}
        {% set z_hop_speed = printer.configfile.settings['safe_z_home'].home_z_hop_speed|float %}
    {% endif %}
    {% set beacon_contact_calibration_temp = printer["gcode_macro BEACON_VARS"].beacon_contact_calibration_temp|default(150)|int %}
    {% set adaptive_meshing = printer["gcode_macro BEACON_VARS"].adaptive_mesh|default(false) %}

    {% if printer.toolhead.homed_axes != "xy" %}
        G28 XY                                                                                     # Partial home (XY)
    {% else %}
        G1 Z{z_hop} F{z_hop_speed}                                                              # Moves to z_hop height
        G1 X{x_wait} Y{y_wait} F{speed}                                                         # Goes to center of the bed
    {% endif %}
    G90                                                                                         # Absolute positioning

    BED_MESH_CLEAR                                                                              # Clears old saved bed mesh (if any)
    SET_GCODE_OFFSET Z=0 ##was 0.125                                                                      # Clears current offset

    # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
    {% if params.BED|int > 90 %}
        M106 S255                                                                               # Turns on the Part cooling fans

        {% if printer.configfile.settings["output_pin nevermore"] is defined %}
            SET_PIN PIN=nevermore VALUE=1                                                       # Turns on nevermore if setup
        {% endif %}

        SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"                                               # Displays info
        M190 S{target_bed}                                                                      # Sets the target temp for the bed

        {% if printer.configfile.config["temperature_sensor chamber"] is defined %}
            SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"                                  # Displays info
            TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}       # Waits for chamber to reach desired temp
        {% endif %}

	# If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
    {% else %}
        SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"                                               # Displays info
        M190 S{target_bed}                                                                      # Sets the target temp for the bed

        SET_DISPLAY_TEXT MSG="Soak for 5min"                                                    # Displays info
        G4 P3   # P300000                                                                           # Waits 5 min for the bedtemp to stabilize
    {% endif %}
	
	
    # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
    SET_DISPLAY_TEXT MSG="Hotend: {beacon_contact_calibration_temp}c"                           # Displays info
    M109 S{beacon_contact_calibration_temp}                                                     # Heats up the nozzle to contact temps

    {% if printer.configfile.config["gcode_macro WIPE_NOZZLE"] is defined %}
        WIPE_NOZZLE                                                                             # Wipes the nozzle via macro if setup
    {% endif %}
    
    # If you don't change build plates then you may remove this by commenting it out
    G28 Z METHOD=CONTACT CALIBRATE=1                                                            # Calibrate z offset and beacon model hot
    
    {% if printer.z_tilt is defined and not printer.z_tilt.applied %}
        SET_DISPLAY_TEXT MSG="Z-tilt adjust"                                                    # Displays info
        {% if printer.configfile.config["gcode_macro FAST_Z_TILT"] is defined %}
            {% if printer.configfile.settings['beacon'].default_probe_method != contact %}
                FAST_Z_TILT                                                                     # Levels the buildplate via Z_TILT but FASTER
            {% endif %}
        {% else %}
            Z_TILT_ADJUST                                                                       # Levels the buildplate via Z_TILT
        {% endif %}
        G28 Z                                                                                   # Homes Z again after z_tilt_adjust
    {% endif %}

    ##  comment if you want to load a previous mesh
    SET_DISPLAY_TEXT MSG="Bed mesh"                                                             # Displays info
    {% if adaptive_meshing %}
        bed_mesh_calibrate ADAPTIVE=1                                                           # Runs an adaptive bed mesh
    {% else %}
        bed_mesh_calibrate                                                                      # Runs a bed mesh 
    {% endif %}

    {% if printer.configfile.config["gcode_macro WIPE_NOZZLE"] is defined %}
        WIPE_NOZZLE                                                                             # Wipes the nozzle via macro if setup
    {% endif %}

    G28 Z METHOD=CONTACT CALIBRATE=0                                                            # Calibrate z offset only after tilt/mesh


    # Heats up the nozzle up to target via data from slicer
    SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"                                           # Displays info 
    {% if printer.configfile.config["gcode_macro SMART_PARK"] is defined %}
        SMART_PARK                                                                              # Parks using KAMP
    {% else %}
        G1 Z{z_hop} F{z_hop_speed}                                                              # Moves to z_hop height
        G1 X{x_wait} Y{y_wait} F{speed}                                                         # Goes to center of the bed
    {% endif %}

	M107                                                                                        # Turns off partcooling fan
    M109 S{target_extruder}                                                                     # Heats the nozzle to printing temp
    
    {% if printer.configfile.config["gcode_macro _BEACON_SET_NOZZLE_TEMP_OFFSET"] is defined %}
        _BEACON_SET_NOZZLE_TEMP_OFFSET                                                          # Adds toolhead expansion offset (REQUIRES ADDITIONAL MACROS NOT BY DEFAULT Found at:https://github.com/YanceyA/Beacon_Thermal_Expansion_Compensation )
    {% endif %}

    # SET_GCODE_OFFSET Z_ADJUST= 0.04 ##was 0.04                                                                 # Apply any additional offset u wish to apply

    # Gets ready to print by doing a purge line
    SET_DISPLAY_TEXT MSG="Printer goes brr"                                                     # Displays info
    {% if printer.configfile.config["gcode_macro PURGE_NOZZLE"] is defined %}
        PURGE_NOZZLE                                                                            # Purges the nozzle via macro if setup
    {% elif printer.configfile.config["gcode_macro LINE_PURGE"] is defined %} #was elif
        LINE_PURGE                                                                              # Purges the nozzle using KAMP adaptive purging if setup
    {% elif printer.configfile.config["gcode_macro VORON_PURGE"] is defined %}
        VORON_PURGE                                                                             # Purges the nozzle using KAMP adaptive purging if setup
    {% endif %}
   
    G90     
    
# [gcode_macro PRINT_START]
# gcode: 
# 	{% set bed = params.BED|int %}
# 	{% set hotend = params.HOTEND|int %}
# 	{% set chamber = params.CHAMBER|default(0)|int %}
	
# 	SET_VELOCITY_LIMIT VELOCITY=800 ACCEL=25000
# 	M204 S15000
	
# 	#CANCEL_COOLDOWN
#     RESPOND MSG="Heatsoaking bed..."
# 	HEATSOAK BED={bed} HOTEND=160 CHAMBER={chamber} WAIT=1
	
# 	RESPOND MSG="Calibrating"
# 	BED_MESH_CLEAR
# 	G28
# 	Z_TILT_ADJUST
# 	G28 Z
# 	BED_MESH_CALIBRATE
# 	#SET_GCODE_OFFSET Z={(hotend-160)/1425}
#     #SET_GCODE_OFFSET Z=0.005
	
# 	M106 S0
	
# 	# WIPE_NOZZLE
	
# 	RESPOND MSG="Purging"
# 	PURGE_LINE HOTEND={hotend}
	
# 	RESPOND MSG="Printing"


[gcode_macro PRINT_END]
gcode: 
	RESPOND MSG="Done"
	
	#COOLDOWN
	BED_MESH_CLEAR
	
	M400
	G91
	
	G1 E-0.5 F3600
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.z < (max_z - 50) %}
	{% set z_safe = 50.0 %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 X{x_safe} Y{y_safe} Z{z_safe} F30000
	
	SET_GCODE_OFFSET Z=0
	TURN_OFF_HEATERS
	PARK_NOZZLE
	
	G1 E-15.0 F4800 #14 conduction, 10 air
	
	# WIPE_NOZZLE CYCLES=1
	
	M106 S128
	G4 P30000
	
	# WIPE_NOZZLE
	
	G92 E0
	M107

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode: 
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE
	PRINT_END

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode:
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G90
	PARK_NOZZLE
	SAVE_GCODE_STATE NAME=PAUSEPARK
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_etemp: 0
variable_m600: 0
gcode: 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	
	{% if m600 > 0 %}
	LOAD_FILAMENT
	PARK_NOZZLE
	M83
	G1 E25 F300
	WIPE_NOZZLE
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=m600 VALUE=0
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=500
	G91
	M83
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=500
	BASE_RESUME
	{% endif %}

[gcode_macro PREHEAT]
description = Preheat
gcode: 
	{% set hotend = params.HOTEND|default(0)|int %}
	{% set bed = params.BED|default(0)|int %}
	
	M104 S{hotend}
	M140 S{bed}
	M106 S128

[gcode_macro M600]
gcode: 
	SAVE_GCODE_STATE NAME=M600
	UNLOAD_FILAMENT
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=m600 VALUE=1
	PAUSE
	RESTORE_GCODE_STATE NAME=M600

[gcode_macro HEATSOAK]
variable_beacon_tolerance: 10
gcode: 
	{% set bed = params.BED|default(110)|int %}
	{% set hotend = params.HOTEND|default(160)|int %}
	{% set chamber = params.CHAMBER|default(50)|int %}
	{% set wait = params.WAIT|default(0)|int %}
	
	PREHEAT HOTEND={hotend} BED={bed}
	
	#CONDITIONAL_HOME
    G28
	
	RESPOND MSG="Heating"
	
	G90
	G1 X90 Y90 Z2 F3600
	M106 S128
	
	{% if wait != 0 %}
	M190 S{bed}
	TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Left" MINIMUM={chamber}
	{% endif %}


[gcode_macro CONDITIONAL_HOME]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
    RESPOND MSG="Homing"
	G28
	{% endif %}

# [gcode_macro COOLDOWN]
# gcode: 
# 	CANCEL_COOLDOWN
# 	SET_FAN_SPEED fan=filter_fan SPEED=1.0
# 	UPDATE_DELAYED_GCODE ID=COOLDOWN DURATION=10

# [gcode_macro CANCEL_COOLDOWN]
# gcode: 
# 	UPDATE_DELAYED_GCODE ID=COOLDOWN DURATION=0

# [delayed_gcode COOLDOWN]
# gcode: 
# 	{% if printer["heater_bed"].target:= 0.0 %}
# 	SET_FAN_SPEED fan=filter_fan SPEED=0.0
# 	{% endif %}

[gcode_macro LOAD_FILAMENT]
gcode: 
	SAVE_GCODE_STATE NAME=LOADFILAMENT
	M83
	G1 E45 F2400
	RESTORE_GCODE_STATE NAME=LOADFILAMENT

[gcode_macro UNLOAD_FILAMENT]
gcode: 
	SAVE_GCODE_STATE NAME=UNLOADFILAMENT
	M83
	
	{% set hotend_temp = printer.extruder.temperature %}
	{% if hotend_temp > 100 %}
	{% if hotend_temp > 200 %}
	PARK_NOZZLE
	
	{% for i in range(3) %}
	PURGE_FILAMENT LENGTH=20
	{% endfor %}
	G1 E20 F300
	G1 E-12 F2400
	G4 P2000
	{% else %}
	
	M104 S0
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=100
	{% endif %}
	{% endif %}
	
	G1 E-55 F2400
	{% if hotend_temp > 200 %}
	WIPE_NOZZLE
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro PURGE_FILAMENT]
gcode:
	{% set length = params.LENGTH|default(30)|int %}
	{% set fan_speed = printer.fan.speed %}
	
	SAVE_GCODE_STATE NAME=PURGEFILAMENT
	PARK_NOZZLE
	
	M83
	M106 S0
	
	G1 E{length} F300
	G1 E-1 F1800
	
	M106 S128
	G4 P1000
	
	M106 S{(fan_speed*255)|int}
	
	WIPE_NOZZLE
	
	RESTORE_GCODE_STATE NAME=PURGEFILAMENT

[gcode_macro COLD_PULL]
gcode: 
	SAVE_GCODE_STATE NAME=COLDPULL
	
	M83
	
	M109 S270
	G1 E100 F300
	M104 S90
	G1 E30 F60
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=95
	G1 E-100 F1000
	
	M104 S0
	
	RESTORE_GCODE_STATE NAME=COLDPULL

[gcode_macro PARK_NOZZLE]
description: Park the nozzle
gcode: 
	SAVE_GCODE_STATE NAME=PARKNOZZLE
	CONDITIONAL_HOME
	G90
	G0 X-6 Y108 F30000
	RESTORE_GCODE_STATE NAME=PARKNOZZLE

[gcode_macro CENTER_NOZZLE]
description: Center the nozzle
gcode: 
	SAVE_GCODE_STATE NAME=CENTERNOZZLE
	CONDITIONAL_HOME
	G90
	G0 X90 Y90 F30000
	RESTORE_GCODE_STATE NAME=CENTERNOZZLE

[gcode_macro WIPE_NOZZLE]
gcode: 
	{% set cycles = params.CYCLES|default(7)|int %}
	SAVE_GCODE_STATE NAME=WIPENOZZLE
	PARK_NOZZLE
	G91
	{% for i in range(cycles) %}
	G1 Y45 F3000
	G1 Y-45 F3000
	{% endfor %}
	RESTORE_GCODE_STATE NAME=WIPENOZZLE


  